const debug = require('debug')('text-stream-search');
const delay = require('delay');

// calls the given handler exactly one time
// when text matches the given string
class BaseSearch {

  constructor(args) {
    this.accumulator = args.accumulator;
    this.resolve = args.resolve;
    this.reject = args.reject;
    if (args.timeout != null) setTimeout(this._onTimeout.bind(this), args.timeout);
  }

  // checks for matches
  //
  // Disables after the first match,
  // subsequent calls are ignored
  async check(text) {
    if (this.matches(text)) await this._foundMatch(text);
  }

  getDisplayName() {
    throw new Error('implement in subclass');
  }

  matches(text) {
    throw new Error('implement in subclass');
  }

  // called when a match is found
  async _foundMatch(text) {
    debug(`found match for ${this.getDisplayName()}`);
    await delay(1);
    this.resolve();
  }

  // called after a given timeout
  _onTimeout() {
    const errorMessage = `Expected '${this.accumulator.toString()}' to include ${this.getDisplayName()}`;
    debug(`Timeout: rejecting with error message '${errorMessage}'`);
    this.reject(new Error(errorMessage));
  }
}

module.exports = BaseSearch;